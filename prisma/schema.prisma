// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id         Int       @id @default(autoincrement())
  name       String?
  email      String    @unique
  password   String?
  created_at DateTime  @default(now())
}
model Segment {
  id                         String   @id @default(uuid())
  segmentName                String

  // Academics & Extracurriculars
  college                    String?
  profileKeyword             String?
  majorGroup                 String?
  majorKeyword               String?
  majorCategory              MajorCategory? // Enum
  graduationClassStanding    String?
  degreeTypes                DegreeType[] // Enum
  gpaMin                     Float?
  gpaMax                     Float?
  organizations              String[] // Extracurriculars
  jobRoleInterests           String[]
  studentIndustryInterests   String[]
  jobSeekingInterests        JobSeekingInterest[] // Enum

  // Location
  studentLocationPreferences String? // City
  currentLocation            String? // City

  // Skills & Experience
  desiredSkills              String[]
  coursework                 String[] // Subject | Specific Course
  workExperience             WorkExperience[]

  // Metadata
  studentCount               Int?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  owner                      String
  IsActive                   Boolean
}

// Enums
enum MajorCategory {
  STEAM
  TEMOnly
  LiberalArts
}

enum DegreeType {
  Associates
  Bachelors
  Masters
  Doctorate
  PostdoctoralStudies
  TechnicalDiploma
}

enum JobSeekingInterest {
  FullTime
  PartTime
}

// Nested model
model WorkExperience {
  id             String  @id @default(uuid())
  jobTitle       String
  company        String
  isCurrent      Boolean @default(false)
  segmentId      String
  segment        Segment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
}
